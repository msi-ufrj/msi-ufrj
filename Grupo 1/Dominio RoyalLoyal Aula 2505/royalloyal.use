model RoyalLoyal

enum Color {silver, gold}

--class Data
--operations
--  static Data(year : Integer, month : Integer, day : Integer) : Data
--  static now() : Data
--  < (t : Data) : Boolean
--  > (t : Data) : Boolean
--  = (t : Data) : Boolean
--  <> (t : Data) : Boolean
--  isAfter(t :Data) : Boolean
--  isBefore(t : Data) : Boolean  
--end

class Data
attributes
	year : Integer
	month : Integer
	day : Integer
operations
  now() : Data
  isAfter(t :Data) : Boolean
  isBefore(t : Data) : Boolean  
  isEqual(t: Data): Boolean
end

class Burning < Transaction
end

class Earning < Transaction 
end

abstract class Transaction
attributes
	points: Integer
	date: Data
	amount: Real
operations
	program():LoyaltyProgram
end

class LoyaltyAccount
attributes
	points: Integer
	number: Integer
operations
	earn(i: Integer)
	burn(i: Integer)
	isEmpty(): Boolean
end

class CostumerCard
attributes
	valid: Boolean
	validFrom: Data
	goodThru: Data
	color: Color
operations
	printedName(): String
end

class Service
attributes
	condition: Integer
	pointsEarned: Integer
	pointsBurned: Integer
	description: String
	serviceNr: Integer
operations
	calcPoints(): Integer
end

class ServiceLevel
attributes
	name: String
end

class ProgramPartner
attributes
	numberOfCustomers: Integer
	name: String
end

class LoyaltyProgram
attributes
	name: String
operations
	enroll(c: Customer)
	getServices(): Set(Service) = partners->collect(deliveredServices)
end

class Customer
attributes
	name: String
	title: String
	isMale: String
	dateOfBirth: Data	
operations
	age(): Integer
end

associationclass Membership between
LoyaltyProgram[*] role programs
Customer[*] role participants
end

association Transaction_Service between
	Transaction [*] role transactions
	Service [1] role generatedBy
end

association Transaction_LoyaltyAccount between
	Transaction [*] role transactions
	LoyaltyAccount [1] role account
end

association Service_ProgramPartner between
	Service [*] role deliveredServices
	ProgramPartner [1] role partner
end

association Service_ServiceLevel between
	Service [*] role availableServices
	ServiceLevel [1] role level
end

association ProgramPartner_LoyaltyProgram between
	ProgramPartner [1..*] role partners
	LoyaltyProgram [1..*] role programs
end

association ServiceLevel_LoyaltyProgram between
	ServiceLevel [1..*] role levels ordered
	LoyaltyProgram [1] role program
end

association ServiceLevel_Membership between
	ServiceLevel [1] role currentLevel
	Membership [*] 
end

association Membership_CostumerCard between
	Membership [1] 
	CostumerCard [1] role card
end

association LoyaltyAccount_Membership between
	LoyaltyAccount [0..1] role account
	Membership [1] 
end

association Transaction_CostumerCard between
	Transaction [*] role transactions
	CostumerCard [1] role card
end

association Customer_CostumerCard between
	Customer [1] role owner
	CostumerCard [*] role cards
end

constraints
	context LoyaltyProgram::enroll(c: Customer)
		pre VerifyParticipantNotEnrolled: 
			--participants->select(p | p = c)-> size() = 0
			participants->excludes(c)
			
		post CertifyMembership:
			--participants->select(p | p = c)-> size() = 1
			participants->includes(c)



