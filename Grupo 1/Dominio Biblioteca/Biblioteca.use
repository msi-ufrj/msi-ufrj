model Biblioteca

enum EstadoAtraso {Normal, Atraso, Atraso30, Atraso90}
enum Situacao {Ativa, Cancelada}

class Professor < Leitor
end

class Aluno < Leitor 
end

abstract class Leitor
attributes
	identificacao: String
	nome: String
	estado: EstadoAtraso
	estadoMatricula: Situacao
operations
	verificaInadiplencia(dataAtual:Integer)
end

class Livro
attributes
	isbn: String
	autores: String
	titulo: String
	editora: String
	ano: Integer
operations
	exemplaresDisponiveis(): Integer = exemplares->size() - exemplares->select(emprestimo->size() > 0)->size()
	pedeReserva(leitor : Leitor, dataReserva:Integer)
end

class Exemplar
operations
	pedeEmprestimo(leitor : Leitor, dataIncial:Integer, dataFinal:Integer)
	pedeEmprestimoComReserva(leitor : Leitor, dataIncial:Integer, dataFinal:Integer)
	devolveEmprestimo(dataAtual:Integer)
end

associationclass Emprestimo between
Leitor[0..1] role leitor
Exemplar[*] role exemplares
attributes
	dataIncial: Integer
	dataFinal: Integer
end

associationclass Reserva between
Leitor[*] role leitores ordered
Livro [*] role livros
attributes
	dataReserva: Integer
	dataMaximaBuscarExemplar: Integer
end

class Multa
attributes
	valor: Integer
end

class ProcessoJudicial
end

association Livro_Exemplar between
	Livro[1] role livro
	Exemplar[*] role exemplares
end

association Multa_Emprestimo between
	Multa [0..1] role multa
	Emprestimo [1] role emprestimo
end

association ProcessoJudicial_Emprestimo between
	ProcessoJudicial [0..1] role processo
	Emprestimo [1] role emprestimo
end

constraints
	context Exemplar::pedeEmprestimo(leitor : Leitor, dataIncial:Integer, dataFinal:Integer)
		pre VerficaMaximoExemplar: 
			if 
				leitor.oclIsKindOf(Aluno)
			then 
				leitor.exemplares->size() < 3 
			else 
				leitor.exemplares->size() < 5
			endif
								   
		pre VerificaTempoMaximoDeEmprestimo: 
			if 
				leitor.oclIsKindOf(Aluno)
			then 
				dataFinal - dataIncial = 3 
			else 
				dataFinal - dataIncial = 7
			endif
								   
		pre VerificaLeitorPossuiAtraso: 
			leitor.estado = EstadoAtraso::Normal
		
		pre VerificaLeitorHabilitado: 
			leitor.estadoMatricula = Situacao::Ativa
			
		post CertificaEmprestimo:
			self.leitor = leitor
		
	context Exemplar::devolveEmprestimo(dataAtual:Integer)
		-- TODO Testar somento no caso em que há reserva
		post CertificaReservaDataInicial: 
			livro.leitores->first().reserva->select(r | r.livros = livro)->asOrderedSet()->first().dataMaximaBuscarExemplar = dataAtual + 2
			
		post CertificaDevolucao: 
			self.leitor->size() = 0
			
	context Exemplar::pedeEmprestimoComReserva(leitor : Leitor, dataIncial:Integer, dataFinal:Integer)
		pre VerficaMaximoExemplar: 
			if 
				leitor.oclIsKindOf(Aluno)
			then 
				leitor.exemplares->size() < 3 
			else 
				leitor.exemplares->size() < 5
			endif
								   
		pre VerificaTempoMaximoDeEmprestimo: 
			if 
				leitor.oclIsKindOf(Aluno)
			then 
				dataFinal - dataIncial = 3 
			else 
				dataFinal - dataIncial = 7
			endif
								   
		pre VerificaLeitorPossuiAtraso: 
			leitor.estado = EstadoAtraso::Normal
		
		pre VerificaLeitorHabilitado: 
			leitor.estadoMatricula = Situacao::Ativa
			
		-- TODO Verificar se exemplar possui reserva pelo usuario
			
		post CertificaEmprestimo:
			self.leitor = leitor
		
	context Livro::pedeReserva(leitor : Leitor, dataReserva:Integer)
		pre VerificaSeNaoHaExemplares: 
			exemplaresDisponiveis() = 0
			
		pre VerificaLeitorPossuiAtraso: 
			leitor.estado = EstadoAtraso::Normal
		
		pre VerificaLeitorHabilitado: 
			leitor.estadoMatricula = Situacao::Ativa
			
		--TODO Não funciona para o caso de multiplas reservas pro mesmo livro
		post CertificaReserva:
			self.leitores->select(l | l = leitor)->size() > 0
		
	context Leitor::verificaInadiplencia(dataAtual:Integer)
		post CertificaEstadoHasValue:
			not estado.oclIsUndefined()
	
		post CertificaEstadoNormal:
			estado <> EstadoAtraso::Normal or emprestimo->select(dataFinal < dataAtual)->size() = 0
			
		post CertificaEstadoAtraso:
			estado <> EstadoAtraso::Atraso or emprestimo->select(dataFinal > dataAtual)->size() > 0 and emprestimo->select((dataAtual - dataFinal) > 29)->size() = 0
		
		post CertificaEstadoAtraso30:
			estado <> EstadoAtraso::Atraso30 or emprestimo->select((dataAtual - dataFinal) > 29)->size() > 0 and emprestimo->select((dataAtual - dataFinal) > 89)->size() = 0
		
		post CertificaEstadoAtraso90:
			estado <> EstadoAtraso::Atraso90 or emprestimo->select((dataAtual - dataFinal) > 89)->size() > 0
			
		post CertificaSituacao:
			(estadoMatricula = Situacao::Ativa and emprestimo->select((dataAtual - dataFinal) > 29)->size() = 0) or
			(estadoMatricula = Situacao::Cancelada and emprestimo->select((dataAtual - dataFinal) > 29)->size() > 0)
		
		post CertificaMultaCriada:
			emprestimo->select(dataFinal < dataAtual)->forAll(emprestimo | emprestimo.multa->size() = 1)
			
		post CertificaProcessoCriado:
			emprestimo->select(dataAtual - dataFinal > 89)->forAll(emprestimo|emprestimo.processo->size() = 1)
			
		post CertificaReservaInvalidadaTempoLimite:
			reserva->select(dataAtual - dataMaximaBuscarExemplar > 2)->size() = 0

	context Leitor
		inv InvalidarReservas: 
			estado = EstadoAtraso::Normal or reserva->size() = 0
			
	